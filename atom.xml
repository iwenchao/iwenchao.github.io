<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>master</title>
  
  <subtitle>blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://wenchaos.com/"/>
  <updated>2018-03-25T08:42:21.000Z</updated>
  <id>http://wenchaos.com/</id>
  
  <author>
    <name>wenchaos</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>git的常用场景</title>
    <link href="http://wenchaos.com/git%E7%9A%84%E5%B8%B8%E7%94%A8%E5%9C%BA%E6%99%AF/"/>
    <id>http://wenchaos.com/git的常用场景/</id>
    <published>2018-03-24T16:00:00.000Z</published>
    <updated>2018-03-25T08:42:21.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="git的常用命令"><a href="#git的常用命令" class="headerlink" title="git的常用命令"></a>git的常用命令</h1><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ol><li><p>本地仓库与git remote仓库的关联</p><ul><li>首先要在github账户上，创建与本地仓库同名的仓库repository;</li><li>进入本地仓库的根目录，开始下面一系列的操作<ol><li>可以选择创建readme.md文件；　echo “# -“ &gt;&gt; README.md</li><li>初始化该仓库；　git init</li><li>将创建的文件README.md文件放置暂存区；　git add README.md</li><li>将暂存区的修改提交; git commit -m “你的提交信息”</li><li>将本地仓库推送到github上；git remote add origin <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:账户名/仓库名.git,git push -u origin master</li></ol></li><li>到此已经基本完成。但是还是需要将你的电脑配置一下<ol><li>git config –global user.name “your account name”</li><li>git config –global user.email “your account email”</li><li>到此已经在当前用户配置了你的信息。下面需要生成你的ssh-key并添加到github上</li><li>生成秘钥；ssh-keygen -t rsa -C “your account email” (连续回车三次)</li><li>最后将公钥添加到git账户里，就OK啦。</li></ol></li><li><p>有时候工作环境和个人环境都需要一个秘钥，这时候可以在生成秘钥的时候，指定名字并且需要添加config文件进行指定</p><ol><li>生成指定名称的秘钥；ssh-keygen -t rsa -C “your account email” -f ~/.ssh/指定文件名</li><li><p>添加特别的配置，在ssh目录下新建config文件，内容如下</p> <figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Host github-aysee</span><br><span class="line">HostName github.com</span><br><span class="line">User git</span><br><span class="line">IdentityFile <span class="symbol">C:</span>/Users/username/.ssh/aysee</span><br><span class="line">你应该可以看懂的吧－－</span><br></pre></td></tr></table></figure><ol><li>在指定项目下，指定作者<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config user.name &quot;Author name&quot;</span><br><span class="line">git config user.email &quot;Author email&quot;</span><br></pre></td></tr></table></figure></li></ol></li></ol></li></ul></li><li><p>一次git提交生命过程中遇到的兄弟们（这里并不准备详细的介绍这些哥们）</p><ul><li>新建文件/目录，修改，提交</li><li><p>一般仓库中的文件可能存在于这三种状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. Untracked files 文件未被跟踪　【处于工作区】</span><br><span class="line">2. Changes to be committed 文件已经被暂存，这是下次提交的内容　【处于暂存区】</span><br><span class="line">3. Changes but not updated 文件被修改，但没有添加到暂存区　【工作区】</span><br></pre></td></tr></table></figure></li><li><p>在开始新的路上，要把有变化的文件添加到索引库中，这个时候首先要遇见：git add命令</p><ol><li>git add -A [path]: 表示把path内的所有的tracked文件那些被修改／被删除／以及untrack的文件，添加到索引库中</li><li>git add -u [path]: 把path中所有的tracked文件，那些被修改／被删除的文件，添加到索引库中</li><li>git add -i [path]: 可以查看到path中所有被修改过／被删除但是还没有提交的文件</li><li>add兄弟家族还有好多，具体可以看看–help管家</li></ol></li><li><p>经历了add家族的接待，那些被添加到索引库的文件即将遇到另外一个兄弟：git commit命令，</p><ol><li>git commit -m “提交的描述信息”　：提交暂存区的文件</li><li>git commit -a -m “提交的描述信息”　：　提交暂存区以及工作区中已被tracked文件</li><li>git commit –amend “再次补充添加上次提交的描述信息”：补充提交信息</li></ol></li><li>经由commit的指引，我们来到了暂存区，这里都是即将要被push到老家的兄弟们：git push命令<ol><li>该命令用于将本地分支更新到暂存区的文件，推送到远程主机：</li><li>git push \&lt;远程主机&gt;　\&lt;本地分支&gt;:\&lt;远程分支名&gt; ; 一般常用 git push，其他更具体的用法请Ｇｏｏｇｌｅ</li><li>常见的一些情况：<ul><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1.git push origin master :表示　将本地分支master推送到origin主机的master分支，如果不存在，则新建</span><br><span class="line">2.git push origin :master 表示　删除指定的远程分支master　</span><br><span class="line">    等同于推送一个空本地分支到远程分支</span><br><span class="line">    git push origin --delete master</span><br><span class="line">3.git push 推送当前分支到远程</span><br><span class="line">4.git push --all　推送所有本地分支到远程</span><br></pre></td></tr></table></figure></li></ul></li></ol></li></ul></li></ol><ol><li><p>天下大事，合久必分，分久必合。</p><ul><li><p>接下来git branch主要用法</p><ol><li>git branch 查看本地分支列表，当前分支“*”标示</li><li>git branch \<branchname>　创建分支，基于当前HEAD指向的提交</branchname></li><li>git branch \<branchname> \<start-point>　创建分支，基于指定的提交节点</start-point></branchname></li><li>git branch -d \<branchname> 　删除分支，弱删除（删除时检查索要删除的分支是否已经合并到其他分支中，否则拒绝）</branchname></li><li>git branch -D \<branchname>　强制删除</branchname></li><li>git branch -m \<oldbranch>　\<newbranch> 重命名分支，如果版本库中已经存在newbranch的分支，拒绝</newbranch></oldbranch></li><li>git branch -M \<oldbranch>　\<newbranch>　重命名分支，即使版本库中已经存在newbranch的分支，强制执行</newbranch></oldbranch></li></ol></li><li><p>那么git merge主要用法：把一个分支或某个commit的修改合并到现在的分支上</p><ol><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">usage: git merge [options] [&lt;commit&gt;...]</span><br><span class="line">   or: git merge [options] &lt;msg&gt; HEAD &lt;commit&gt;</span><br><span class="line">   or: git merge --abort</span><br></pre></td></tr></table></figure></li><li><p>先切换到目的分支：git checkout destination-branch</p></li><li>再将目标分支合并到目的分支：　git merge aim-branch</li><li>如果有冲突，先解决，再经过一次提交过程，完成合并</li></ol></li></ul></li></ol><ol><li>关于git的一些必要概念<ul><li>工作区：当前工程目录范围下</li><li>暂存区：即stage，一般存放在工程根目录下的.git/index文件夹，</li><li>版本库：工作区有一个隐藏目录.git　这个就是当前工程的版本库,是一个简单的数据库，其中包含所有用来维护与管理项目修订版本与历史信息。</li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;git的常用命令&quot;&gt;&lt;a href=&quot;#git的常用命令&quot; class=&quot;headerlink&quot; title=&quot;git的常用命令&quot;&gt;&lt;/a&gt;git的常用命令&lt;/h1&gt;&lt;h2 id=&quot;使用场景&quot;&gt;&lt;a href=&quot;#使用场景&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
      <category term="工具类" scheme="http://wenchaos.com/categories/%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
    
    
      <category term="git" scheme="http://wenchaos.com/tags/git/"/>
    
  </entry>
  
</feed>
